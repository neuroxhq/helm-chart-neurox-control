apiVersion: batch/v1
kind: Job
metadata:
  name: '{{ include "neurox-control.fullname" . }}-secrets-job-hook'
  namespace: "{{ .Release.Namespace }}"
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "6"
spec:
  backoffLimit: 1
  template:
    spec:
    {{- if .Values.global.scheduling.affinity }}
      affinity: {{ toYaml .Values.global.scheduling.affinity | nindent 8 }}
    {{- end }}
      containers:
        - name: check-and-create-secrets
          image: "{{ .Values.register.image.kubectl.repository }}:{{ .Values.register.image.kubectl.tag }}"
          command:
            - /bin/sh
            - -c
            - |
              generate_random_string() {
                local length=$1
                head -c "$length" /dev/urandom | sha256sum | cut -d ' ' -f1 | head -c "$length"
              }

              if kubectl get secret ${REDIS_SECRET_NAME} -n ${NAMESPACE}
              then
                echo "Secret ${REDIS_SECRET_NAME} already exists, skipping creation..."
              else
                echo "Creating ${REDIS_SECRET_NAME} secret..."
                kubectl create secret generic ${REDIS_SECRET_NAME} \
                  --namespace ${NAMESPACE} \
                  --from-literal=${REDIS_SECRET_KEY_NAME}=$(generate_random_string 10) \
                  --type=Opaque
              fi

              JWT_SECRET='{{ include "neurox-control.fullname" . }}-sso-jwt'
              if kubectl get secret ${JWT_SECRET} -n ${NAMESPACE}
              then
                echo "Secret ${JWT_SECRET} already exists, skipping creation..."
              else
                echo "Creating ${JWT_SECRET} secret..."
                kubectl create secret generic ${JWT_SECRET} \
                  --namespace ${NAMESPACE} \
                  --from-literal=jwt=$(generate_random_string 64) \
                  --type=Opaque
              fi

              if kubectl get secret ${WORKLOAD_AUTH_SECRET_NAME} -n ${NAMESPACE}
              then
                echo "Secret ${WORKLOAD_AUTH_SECRET_NAME} already exists, skipping creation..."
              else
                echo "Creating ${WORKLOAD_AUTH_SECRET_NAME} secret..."
                kubectl create secret generic ${WORKLOAD_AUTH_SECRET_NAME} \
                  --namespace ${NAMESPACE} \
                  --from-literal=${WORKLOAD_AUTH_SECRET_KEY_NAME}=$(generate_random_string 32) \
                  --type=Opaque
              fi

              if kubectl get secret ${LOCAL_SECRET_NAME} -n ${NAMESPACE}
              then
                echo "Secret ${LOCAL_SECRET_NAME} already exists, skipping creation..."
              else
                kubectl create secret generic ${LOCAL_SECRET_NAME} -n ${NAMESPACE} \
                  --namespace ${NAMESPACE} \
                  --from-literal=${LOCAL_SECRET_KEY_NAME}=$(generate_random_string 32) \
                  --type=Opaque
              fi

              if kubectl get secret ${OIDC_SECRET_NAME} -n ${NAMESPACE}
              then
                echo "Secret ${OIDC_SECRET_NAME} already exists, skipping creation..."
              else
                kubectl create secret generic ${OIDC_SECRET_NAME} -n ${NAMESPACE} \
                  --namespace ${NAMESPACE} \
                  --from-literal=${OIDC_SECRET_ID_KEY_NAME}=$(generate_random_string 32) \
                  --from-literal=${OIDC_SECRET_SECRET_KEY_NAME}=$(generate_random_string 32) \
                  --type=Opaque
              fi

              echo "Secrets validated successfully."
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LOCAL_SECRET_NAME
              value: "{{ .Values.idp.local.secret.name }}"
            - name: LOCAL_SECRET_KEY_NAME
              value: "{{ .Values.idp.local.secret.key }}"
            - name: OIDC_SECRET_NAME
              value: "{{ .Values.sso.secret.name }}"
            - name: OIDC_SECRET_ID_KEY_NAME
              value: "{{ .Values.sso.secret.key.id }}"
            - name: OIDC_SECRET_SECRET_KEY_NAME
              value: "{{ .Values.sso.secret.key.secret }}"
            - name: REDIS_SECRET_NAME
              value: "{{ .Values.global.redis.secret.name }}"
            - name: REDIS_SECRET_KEY_NAME
              value: "{{ .Values.global.redis.secret.key }}"
            - name: WORKLOAD_AUTH_SECRET_NAME
              value: "{{ .Values.api.secret.workloadAuth.name }}"
            - name: WORKLOAD_AUTH_SECRET_KEY_NAME
              value: "{{ .Values.api.secret.workloadAuth.key }}"
    {{- if .Values.global.scheduling.nodeSelector }}
      nodeSelector: {{ toYaml .Values.global.scheduling.nodeSelector | nindent 8 }}
    {{- end }}
      restartPolicy: Never
      serviceAccountName: '{{ include "neurox-control.fullname" . }}-secrets-job-hook'
    {{- if .Values.global.scheduling.tolerations }}
      tolerations: {{ toYaml .Values.global.scheduling.tolerations | nindent 8 }}
    {{- end }}
