---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ include "neurox-control-api.fullname" . }}'
  namespace: "{{ .Release.Namespace }}"
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: '{{ include "neurox-control-api.fullname" . }}'
  template:
    metadata:
      labels:
        app: '{{ include "neurox-control-api.fullname" . }}'
        version: "{{ .Chart.Version }}"
    spec:
    {{- if .Values.global.scheduling.affinity }}
      affinity: {{ toYaml .Values.global.scheduling.affinity | nindent 8 }}
    {{- end }}
      initContainers:
      - name: wait-for-dependent-services
        image: "{{ .Values.image.init.repository }}:{{ .Values.image.init.tag }}"
        imagePullPolicy: '{{ include "neurox-control-api.image.init.pullPolicy" . }}'
        command:
        - /bin/sh
        args:
        - -c
        - |
          #!/bin/sh
          wait_for_service() {
            local friendly_name="$1"
            local service_host="$2"
            local service_port="$3"
            local sleep_interval="${4:-5}" # Default sleep interval to 5 seconds if not provided

            echo "Checking availability of $friendly_name at $service_host:$service_port..."

            while ! nc -z "$service_host" "$service_port"; do
              echo "$friendly_name is not available at $service_host:$service_port. Retrying in $sleep_interval seconds..."
              sleep "$sleep_interval"
            done

            echo "$friendly_name is now available at $service_host:$service_port."
          }

          wait_for_service "Identity Provider" {{ include "neurox-control-api.idp.service" . }} {{ include "neurox-control-api.idp.port" . }}
          wait_for_service "Redis" {{ include "neurox-control-api.redis.service" . }} {{ include "neurox-control-api.redis.port" . }}
          wait_for_service "Relay Server" {{ include "neurox-control-api.relay.service" . }} {{ .Values.global.relay.apiPort }}
          wait_for_service "Thanos" {{ include "neurox-control-api.thanos.service" . }} {{ include "neurox-control-api.thanos.port"  . }}
      containers:
      - name: neurox-control-api
        image: '{{ include "neurox-control-api.image.run.registry" . }}:{{ default .Chart.AppVersion .Values.image.run.tag }}'
        imagePullPolicy: '{{ include "neurox-control-api.image.run.pullPolicy" . }}'
        ports:
        - containerPort: 3080
        env:
        - name: AUTH_PROVIDERS
          value: '{{ join "," .Values.global.identityProviders.enabled }}'
        - name: CLAIMS_HEADER_PREFIX
          value: "{{ .Values.global.sso.headerPrefix }}"
      {{- if .Values.global.cloudHost }}
        - name: CLOUD_HOST
          value: "{{ .Values.global.cloudHost }}"
      {{- end }}
        - name: CONTROL_CHART_NAME
          valueFrom:
            configMapKeyRef:
              name: '{{ include "neurox-control-api.chartConfigMap.name" . }}'
              key: "{{ .Values.global.chartConfigMap.controlKeys.name }}"
        - name: CONTROL_CHART_VERSION
          valueFrom:
            configMapKeyRef:
              name: '{{ include "neurox-control-api.chartConfigMap.name" . }}'
              key: "{{ .Values.global.chartConfigMap.controlKeys.version }}"
        - name: FASTIFY_PORT
          value: '3080'
        - name: FASTIFY_LOG_LEVEL
          value: '{{ .Values.global.log.level }}'
        - name: FASTIFY_LOG_REQUESTS
          value: '{{ .Values.global.log.requests }}'
        - name: FASTIFY_PRETTY_LOGS
          value: '{{ .Values.global.log.pretty }}'
      {{- if has "google" .Values.global.identityProviders.enabled }}
        - name: GOOGLE_OAUTH_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.global.identityProviders.google.secret.name }}"
              key: "{{ .Values.global.identityProviders.google.secret.key.id }}"
        - name: GOOGLE_OAUTH_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.global.identityProviders.google.secret.name }}"
              key: "{{ .Values.global.identityProviders.google.secret.key.secret }}"
      {{- end }}
        - name: IDP_HOST
          value: '{{ include "neurox-control-api.idp.host" . }}'
        - name: NEUROX_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: '{{ include "neurox-control-api.configConfigMap.name" . }}'
              key: "{{ .Values.global.configConfigMap.domainKey }}"
        - name: NEUROX_INSTALL_KEY
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.global.license.secret.name }}"
              key: "{{ .Values.global.license.secret.key }}"
        - name: NODE_ENV
          value: production
        - name: RELEASE_NAME
          value: '{{ .Release.Name }}'
        - name: RELEASE_NAMESPACE
          value: "{{ .Release.Namespace }}"
        - name: PROM_URL
          value: '{{ include "neurox-control-api.promUrl" . }}'
      {{- if .Values.publicKey }}
        - name: PUBLIC_KEY
          value: "{{ .Values.publicKey }}"
      {{- end }}
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.global.redis.secret.name }}"
              key: "{{ .Values.global.redis.secret.key }}"
        - name: REDIS_HOSTS
          value: '{{ include "neurox-control-api.redis.hosts" . }}'
        - name: REDIS_MASTER
          value: mymaster
        - name: REDIS_SENTINELS
          value: 'true'
        - name: REGISTRY_SECRET
          valueFrom:
            secretKeyRef:
              name: '{{ .Values.global.image.pullSecretName }}'
              key: .dockerconfigjson
        - name: RELAY_CONFIG_KEY
          value: '{{ .Values.global.relay.configKey }}'
        - name: RELAY_URL
          value: '{{ include "neurox-control-api.relay.url" . }}'
        - name: SCHEDULER_QUEUE
          value: '{{ .Values.global.scheduler.queueName }}'
        - name: WORKLOAD_AUTH
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.secret.workloadAuth.name }}"
              key: "{{ .Values.secret.workloadAuth.key }}"
        - name: WORKLOAD_CHART_NAME
          valueFrom:
            configMapKeyRef:
              name: '{{ include "neurox-control-api.chartConfigMap.name" . }}'
              key: "{{ .Values.global.chartConfigMap.workloadKeys.name }}"
        - name: WORKLOAD_CHART_REPOSITORY
          valueFrom:
            configMapKeyRef:
              name: '{{ include "neurox-control-api.chartConfigMap.name" . }}'
              key: "{{ .Values.global.chartConfigMap.workloadKeys.repository }}"
        - name: WORKLOAD_CHART_VERSION
          valueFrom:
            configMapKeyRef:
              name: '{{ include "neurox-control-api.chartConfigMap.name" . }}'
              key: "{{ .Values.global.chartConfigMap.workloadKeys.version }}"
      enableServiceLinks: false
    {{- if .Values.global.scheduling.nodeSelector }}
      nodeSelector: {{ toYaml .Values.global.scheduling.nodeSelector | nindent 8 }}
    {{- end }}
      serviceAccountName: '{{ include "neurox-control-api.fullname" . }}'
    {{- if .Values.global.scheduling.tolerations }}
      tolerations: {{ toYaml .Values.global.scheduling.tolerations | nindent 8 }}
    {{- end }}
